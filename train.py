# -*- coding: utf-8 -*-
"""Heart_failure_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AU5nAH9FM_pi7s6PlZnQ_T7E8KlknEeA
"""

import pandas as pd
import tensorflow as tf

df = pd.read_csv("/content/heart_failure_clinical_records_dataset.csv")
df

df.isna().sum()

X = df.drop(columns=['DEATH_EVENT'])
y = df["DEATH_EVENT"]

X, y

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle = True, test_size = 0.2, random_state=42)

print("Training Size", X_train.shape, y_train.shape)
print("Testing Size",  X_test.shape, y_test.shape)

scaler = StandardScaler()
scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

X_train, X_test

#set seed
tf.random.set_seed(42)

#model 1
model1 = tf.keras.Sequential([
    tf.keras.layers.Dense(250),
    tf.keras.layers.Dense(50),
    tf.keras.layers.Dense(1)
])

#compile
model1.compile(loss = "binary_crossentropy",
               optimizer = tf.keras.optimizers.Adam(),
               metrics=["accuracy"])

#fit
history1 = model1.fit(X_train, y_train, epochs = 5, validation_data = (X_test, y_test))

#plotting the results
import matplotlib.pyplot as plt

pd.DataFrame(history1.history).plot(figsize=(8, 5))
plt.grid(True)
plt.gca().set_ylim(0,1)
plt.show()

model1.evaluate(X_test, y_test)

